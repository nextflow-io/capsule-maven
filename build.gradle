buildscript {
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.0'
    }
}

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'maven'
    id 'signing'
    // id 'net.sf.proguard.proguard-gradle' version '5.0'
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

group               = "io.nextflow"
version             = "1.0.3.1"
status              = "integration"
description         = "Java packaging and deployment system"
ext.url             = "https://github.com/nextflow-io/capsule-maven"
ext.vendor          = "Nextflow.io"
ext.licenseName     = "Eclipse Public License - v 1.0"
ext.licenseUrl      = "http://www.eclipse.org/legal/epl-v10.html"
ext.scmUrl          = "https://github.com/nextflow-io/capsule-maven"
ext.scmConnection   = "https://github.com/nextflow-io/capsule-maven.git"
ext.distDir         = "$buildDir/dist"
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

ext.caplet = 'MavenCapsule'

ext.capsuleVer          = '1.0.3.1'
ext.aetherVer           = '1.1.0'
ext.mavenVer            = '3.3.9'
ext.plexusVer           = '1.6'
ext.slf4jVer            = '1.7.21'
ext.takariLocalRepoVer  = '0.11.2'
ext.takariFilemanVer    = '0.8.3'
ext.mavenGuavaVer       = '18.0'

ext.junitVer            = '4.12'
ext.testGuavaVer        = '19.0'
ext.truthVer            = '0.28'
ext.jimfsVer            = '1.1'
ext.mockitoVer          = '1.10.19'

ext.nexusUsername = project.findProperty('nexusUsername')
ext.nexusPassword = project.findProperty('nexusPassword')
ext.nexusFullName = project.findProperty('nexusFullName')
ext.nexusEmail = project.findProperty('nexusEmail')

// User and Password are taken from ~/.gradle/gradle.properties
if (!nexusUsername || !nexusPassword) {
    throw new IllegalStateException("Sonatype username or password not set!")
}

repositories {
//     mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/releases" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

configurations {
    [compile, runtime]*.resolutionStrategy {
        failOnVersionConflict()
    }

    all*.exclude group: 'org.eclipse.sisu', module: '*'
}

dependencies {
    compile "$group:capsule:$capsuleVer"
    compile "org.eclipse.aether:aether-api:$aetherVer"
    compile "org.eclipse.aether:aether-util:$aetherVer"
    compile "org.eclipse.aether:aether-impl:$aetherVer"
    compile "org.eclipse.aether:aether-connector-basic:$aetherVer"
    compile "org.eclipse.aether:aether-transport-file:$aetherVer"
    compile("org.eclipse.aether:aether-transport-http:$aetherVer") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    compile("org.apache.maven:maven-aether-provider:$mavenVer") {
        exclude group: 'org.eclipse.aether', module: '*'
    }
    compile "org.apache.maven:maven-model:$mavenVer"
    compile("org.apache.maven:maven-settings-builder:$mavenVer") {
        exclude group: 'org.codehaus.plexus', module: 'plexus-utils'
    }
    compile("org.codehaus.plexus:plexus-container-default:$plexusVer") {
        exclude group: 'org.codehaus.plexus', module: 'plexus-utils'
        exclude group: 'com.google.collections', module: 'google-collections'
        exclude group: 'commons-logging', module: '*'
        exclude group: 'junit', module: '*'
    }
    compile "io.takari.aether:takari-local-repository:$takariLocalRepoVer"
    compile("io.takari:takari-filemanager:$takariFilemanVer") {
        exclude group: 'org.slf4j', module: '*'
    }

    runtime "com.google.guava:guava:$mavenGuavaVer" // necessary -- unfortunately -- for maven-aether-provider
    runtime "org.slf4j:slf4j-nop:$slf4jVer"

    testCompile "$group:capsule-util:$capsuleVer"
    testCompile "junit:junit:$junitVer"
    testCompile "com.google.guava:guava:$testGuavaVer"
    testCompile "com.google.truth:truth:$truthVer"
    testCompile "com.google.jimfs:jimfs:$jimfsVer"
    testCompile "org.mockito:mockito-all:$mockitoVer"
}

shadowJar {
    outputs.upToDateWhen { false }

    // artifactAttached = false
    classifier = '' // overwrite jar
    destinationDir = file("$buildDir/libs")

    dependencies { exclude(dependency('co.paralleluniverse:capsule:.*')) }

    exclude 'META-INF/**'
    exclude 'licenses/**' // licenses to thoughtworks CruiseControl, Javolution, and Indiana University Extreme! Labs, none of which are used by Capsule
    exclude 'about.html'
    exclude 'io/takari/aether/localrepo/**'
    exclude 'javax/inject/**'
    exclude 'org/apache/log4j/lf5/**'
    exclude 'org/apache/log4j/xml/log4j.dtd'
    exclude 'org/apache/commons/codec/language/**'
    exclude '**/version.properties'

    relocate 'org.', 'capsule.org.'
    relocate 'io.', 'capsule.io.'
    relocate 'com.', 'capsule.com.'

    manifest {
        attributes(
	    'Main-Class'  : 'Capsule',
            'Caplets'     : 'MavenCapsule'
        )
    }
}

task proguard(type: proguard.gradle.ProGuardTask, dependsOn:[shadowJar]) {
    injars jar
    outjars "$buildDir/libs/${project.name}-${version}-shrunk.jar"
    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    keep "class ${caplet} { *; }"
    keep "class Capsule { *; }"
    keep "class capsule.Dependencies { *; }"
    keepclassmembers 'enum * {**[] $VALUES;public static **[] values();public static ** valueOf(java.lang.String);}'
    keep 'class capsule.org.eclipse.aether.AbstractForwardingRepositorySystemSession { *; }'
    dontoptimize
    dontobfuscate
    dontwarn
    //whyareyoukeeping 'class capsule.org.codehaus.plexus.**'
    doLast {
        logger.info("$buildDir/libs/${project.name}-${project.version}-shrunk.jar -> $buildDir/libs/${project.name}-${project.version}.jar")
        def out = file("$buildDir/libs/${project.name}-${project.version}.jar")
        if (out.exists())
            out.delete()
        file("$buildDir/libs/${project.name}-${version}-shrunk.jar").renameTo(out)
    }
}

javadoc {
    options.noDeprecated = true
    excludes = [ "capsule/**" ]
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

test {
    systemProperty "java.protocol.handler.pkgs", "co.paralleluniverse.filesystem"

    beforeTest { desc ->
        logger.quiet("Running test: " + desc)
    }

    afterTest { desc, result ->
        if(result.resultType == TestResult.ResultType.FAILURE) {
            logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
            if(result.exception != null) {
                result.exception.printStackTrace()
            }
        }
    }
}

task run(type: JavaExec, dependsOn:[testClasses]) {
    classpath = sourceSets.main.runtimeClasspath
    if(project.hasProperty('mainClass')){
        main = project.mainClass
    }
    if(project.hasProperty('args')){
        args project.args.split('\\s+')
    }
}

tasks.withType(JavaExec) {
    classpath += sourceSets.test.runtimeClasspath
}

///////// Publish Artifacts
artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            pom.project {
                name project.name
                packaging 'jar'
                description project.description
                url project.url
                scm {
                    url project.scmUrl
                    connection project.scmConnection
                    developerConnection project.scmConnection
                }
                licenses {
                    license {
                        name project.licenseName
                        url project.licenseUrl
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id nexusUsername
                        name nexusFullName
                        email nexusEmail
                    }
                }
            }
        }
    }
}

[assemble, build, install, signArchives, uploadArchives]*.dependsOn proguard

install.repositories.mavenInstaller {
    pom.whenConfigured {
        it.dependencies.clear()
    }
}

uploadArchives.repositories.mavenDeployer {
    pom.whenConfigured {
        it.dependencies.clear()
    }
}

defaultTasks 'build'
